import traceback
from http import HTTPStatus
from flask import request, has_request_context
from backend.common.api_response_wrapper import api_response
from backend.common.logger import get_logger

logger = get_logger()


def handle_exception(e):
    """
    Handle exceptions and return standardized API JSON error responses.

    This function processes different types of exceptions,
    and returns a consistent API response using the `api_response` function,
    with appropriate HTTP status codes and error messages.

    Args:
        e (Exception): The exception object to be handled

    Returns:
        flask.Response: A Flask JSON response object generated by `api_response`,
                        containing standardized error information.

    Supported Exception Types:
        - ValueError: Returns 400 Bad Request
        - RuntimeError: Returns 503 Service Unavailable
        - Other exceptions: Returns 500 Internal Server Error

    """
    if isinstance(e, ValueError):
        status_code = HTTPStatus.BAD_REQUEST
    elif isinstance(e, RuntimeError):
        status_code = HTTPStatus.SERVICE_UNAVAILABLE
    else:
        status_code = HTTPStatus.INTERNAL_SERVER_ERROR

    if has_request_context():
        parts = request.path.strip("/").split("/")
        platform = parts[1] if len(parts) > 1 else "unknown"
    else:
        platform = "unknown"

    logger.error(
        "Exception occurred [%s] on platform [%s]: %s\nTraceback:\n%s",
        type(e).__name__,
        platform,
        str(e),
        traceback.format_exc(),
    )
    return api_response(success=False, message=str(e), status_code=status_code)


def register_error_handlers(app):
    """
    Register error handlers for a Flask application.

    This function sets up the application's error handling by registering
    the handle_exception function as the handler for all Exception types.

    Args:
        app (flask.Flask): The Flask application instance to register handlers for

    Returns:
        None

    Example:
        from flask import Flask
        app = Flask(__name__)
        register_error_handlers(app)
        # All exceptions in the app will now be handled by handle_exception
    """
    app.register_error_handler(Exception, handle_exception)
